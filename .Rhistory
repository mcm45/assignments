names(weekdaysteps) <- c("weekday", "steps")
plot(weekdaysteps$weekday, weekdaysteps$steps, type = "l", xlab="weekday",
ylab="average steps")
#     names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
title("Average Steps by Weekday")
par(mfrow=c(1,2))
plot(avgsteps_wd$interval, avgsteps_wd$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
dev.off()
par(mfrow=c(2,1))
plot(avgsteps_we$interval, avgsteps_we$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
par(mfrow=c(1,2))
plot(avgsteps_we$interval, avgsteps_we$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by 5 minute interval - Weekend")
title("Average Steps by 5
minute interval - Weekday")
dev.off()
par(mfrow=c(1,2))
plot(avgsteps_wd$interval, avgsteps_wd$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval - Weekday")
dev.off()
par(mfrow=c(1,2))
plot(avgsteps_wd$interval, avgsteps_wd$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval
- Weekday")
plot(avgsteps_we$interval, avgsteps_we$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval
- Weekend")
summary(activity$steps) #2304 NA's
activity$newsteps <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE)
View(activity)
?transform
activity2 = transform(activity, newsteps = ifelse(is.na(activity$steps), mean(activity$steps, na.rm=TRUE), activity$steps))
View(activity2)
activity2 = transform(activity, newsteps = ifelse(is.na(activity$steps),
aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE),
activity$steps))
View(activity2)
View(activity2)
View(activity)
?merge
activity$newsteps <- ifelse(is.na(activity$steps), mean(activity$steps), activity$steps)
View(activity)
activity$newsteps[which(is.na(activity$steps))] <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE)
View(activity)
?mean
?aggregate
View(activity2)
View(avgsteps)
View(activity)
activity$newsteps <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE)
View(activity)
View(avgsteps)
activity$newsteps <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE)
View(activity)
View(activity)
View(activity)
plot(avgsteps$interval, avgsteps$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
dev.off()
plot(avgsteps$interval, avgsteps$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
summary(activity$steps) #2304 NA's
View(activity)
activity$meansteps <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE)
activity$newsteps[which(is.na(activity$steps))] <- aggregate(activity$steps, by=list(activity$interval), FUN=mean, na.rm=TRUE)
activity$newsteps[which(is.na(activity$steps))] <- mean(activity$steps)
activity$newsteps[which(is.na(activity$steps))] <- mean(activity$steps)
View(activity)
?where
?function
)
??function
)
View(avgsteps)
View(avgsteps)
?mapply
steps.na <- function(steps, interval) {
impute <- NA
if (!is.na(steps))
impute <- c(steps)
else impute <- avgsteps[avgsteps$interval == interval, "steps"]
return(impute)
}
activity.imp <- activity
activity.imp$steps <- mapply(steps.na, activity.imp$steps, activity.imp$interval)
View(activity.imp)
activity.imp <- activity
View(aggdata)
View(avgsteps)
str(avgsteps$interval)
steps.na <- function(step, interval) {
str(step)
impute <- NA
if (!is.na(step))
impute <- c(step)
else impute <- avgsteps[avgsteps$interval == interval, "steps"]
return(impute)
}
activity.imp <- activity
activity.imp$newsteps <- mapply(steps.na, activity.imp$steps, activity.imp$interval)
str(avgsteps[avgsteps$interval == interval, "steps"])
str(avgsteps[avgsteps$interval == 5, "steps"])
?str
steps.na <- function(step, minute) {
#str(minute) #logging out
#str(avgsteps$interval) #logging out
impute <- NA
if (!is.na(step))
impute <- c(step)
else impute <- avgsteps[avgsteps$interval == minute, "steps"]
return(impute)
}
activity.imp <- activity
activity.imp$newsteps <- mapply(steps.na, activity.imp$steps, activity.imp$interval)
View(activity.imp)
?max
max(avgsteps$steps)
avgsteps[which.max(avgsteps$steps),]
summary(activity$steps)
?par
sum(is.na(activity$steps))
activity.imp$mdy <- mdy(activity.imp$date)
activity.imp$weekday <- as.factor(weekdays(activity.imp$mdy))
summary(activity.imp$weekday)
weekend <- c("Saturday", "Sunday")
activity.imp$wkdf <- factor(activity$weekday %in% weekend, levels=c("TRUE", "FALSE"),
labels=c("weekend","weekday"))
library(ggplot2)
ggplot(avgsteps_wd, aes(interval, steps) + geom_line)
par(mfrow=c(1,2))
avgsteps_we <- aggregate(act_wkend$steps, by=list(act_wkend$interval), FUN=mean, na.rm=TRUE)
names(avgsteps_we) <- c("interval", "steps")
plot(avgsteps_we$interval, avgsteps_we$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval
- Weekend")
avgsteps_wd <- aggregate(act_wkd$steps, by=list(act_wkd$interval), FUN=mean, na.rm=TRUE)
names(avgsteps_wd) <- c("interval", "steps")
plot(avgsteps_wd$interval, avgsteps_wd$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval
- Weekday")
par(mfrow=c(2,1))
avgsteps_we <- aggregate(act_wkend$steps, by=list(act_wkend$interval), FUN=mean, na.rm=TRUE)
names(avgsteps_we) <- c("interval", "steps")
plot(avgsteps_we$interval, avgsteps_we$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval
- Weekend")
avgsteps_wd <- aggregate(act_wkd$steps, by=list(act_wkd$interval), FUN=mean, na.rm=TRUE)
names(avgsteps_wd) <- c("interval", "steps")
plot(avgsteps_wd$interval, avgsteps_wd$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by
5 minute interval
- Weekday")
par(mfrow=c(2,1))
par(mar=c(2,2,2,2))
avgsteps_we <- aggregate(act_wkend$steps, by=list(act_wkend$interval), FUN=mean, na.rm=TRUE)
names(avgsteps_we) <- c("interval", "steps")
plot(avgsteps_we$interval, avgsteps_we$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by  5 minute interval  - Weekend")
avgsteps_wd <- aggregate(act_wkd$steps, by=list(act_wkd$interval), FUN=mean, na.rm=TRUE)
names(avgsteps_wd) <- c("interval", "steps")
plot(avgsteps_wd$interval, avgsteps_wd$steps, type = "l", xlab="5 minute interval",
ylab="average steps")
title("Average Steps by 5 minute interval - Weekday")
View(dfbracket)
View(dfbracket)
dfbracket$hscore <- as.numeric(grep("\\[.]", dfbracket$title))
View(dfbracket)
dfbracket$hscore <- as.numeric(grep("\\[.\]", dfbracket$title))
dfbracket$hscore <- as.numeric(grep("\\[.\\]", dfbracket$title))
View(dfbracket)
dfbracket$hscore <- as.numeric(grep("\[.\]", dfbracket$title))
dfbracket$hscore <- as.numeric(grep("\\[.\\]", dfbracket$title))
View(dfbracket)
dfbracket$hscore <- grep("\\[.\\]", dfbracket$title)
View(dfbracket)
dfbracket$hscore <- grep("\\.*[.\\].*", dfbracket$title)
dfbracket$hscore <- grep(".*\\[.\\].*", dfbracket$title)
View(dfbracket)
dfbracket$hscore <- grep(".*", dfbracket$title)
View(dfbracket)
?grep
grep
?grep
str(dfbracket[1]$title)
str(dfbracket[1])
str(dfbracket[,1])
str(dfbracket[0][1])
str(dfbracket[1,])
str(dfbracket[1,]$title)
dfbracket[1,]$title
dfbracket[1]
dfbracket[1][0]
dfbracket[1][0][1]
dfbracket[,1]
dfbracket[,1][0]
dfbracket[,1][1]
dfbracket[[,1]]
dfbracket[[1]]
dfbracket[[1:1]
]
dfbracket[[1:1,]
]
dfbracket[1:1,]
dfbracket[1:1, "title"]
dfbracket[0:0, "title"]
dfbracket[1, "title"]
View(dfbracket)
grep('.*', dfbracket[1, "title"])
grep('.*', dfbracket[1, "title"], value=true)
grep('.*', dfbracket[1, "title"], value=TRUE)
grep('', dfbracket[1, "title"], value=TRUE)
grep('\\[.\\]', dfbracket[1, "title"], value=TRUE)
grep('\d', dfbracket[1, "title"], value=TRUE)
grep('\D', dfbracket[1, "title"], value=TRUE)
grep('\w', dfbracket[1, "title"], value=TRUE)
grep('\\d', dfbracket[1, "title"], value=TRUE)
grep('a', dfbracket[1, "title"], value=TRUE)
grep(':alpha:', dfbracket[1, "title"], value=TRUE)
grep(':digit:', dfbracket[1, "title"], value=TRUE)
grep('\d', dfbracket[1, "title"], value=TRUE, perl=TRUE)
grep('\\d', dfbracket[1, "title"], value=TRUE, perl=TRUE)
grep('any', dfbracket[1, "title"], value=TRUE, perl=TRUE)
grep('[^anyone]', dfbracket[1, "title"], value=TRUE, perl=TRUE)
grep("[^anyone]", dfbracket[1, "title"], value=TRUE, perl=TRUE)
grep(".$", dfbracket[1, "title"], value=TRUE, perl=TRUE)
grep("any", str(dfbracket[1, "title"]), value=TRUE, perl=TRUE)
grep("any", as.chararacter(dfbracket[1, "title"]), value=TRUE, perl=TRUE)
grep("any", as.character(dfbracket[1, "title"]), value=TRUE, perl=TRUE)
grep("into", as.character(dfbracket[1, "title"]), value=TRUE, perl=TRUE)
grep("into", as.character(dfbracket[1, "title"]), value=TRUE)
name -> grep("into", as.character(dfbracket[1, "title"]), value=TRUE)
name <- grep("into", as.character(dfbracket[1, "title"]), value=TRUE)
str(name)
regmatches(dfbracket[1, "title"]), regexpr('any', dfbracket[1, "title"])
regmatches(dfbracket[1, "title"]), regexpr('any', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"]),regexpr('any', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"],regexpr('any', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"],regexpr('\d', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"],regexpr('\\d', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"], regexpr('\\[\\d\\]', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"], regexpr('\\[(\\d\\)]', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"], regexpr('\\[(\\d)\\]', dfbracket[1, "title"]))
?regmatches
regmatches(dfbracket[1, "title"], regex('\\[(\\d)\\]', dfbracket[1, "title"]))
regmatches(dfbracket[1, "title"], regexec('\\[(\\d)\\]', dfbracket[1, "title"]))
install.packages("stringer")
library(stringer)
install.packages("stringr")
install.packages("stringr")
str_match_all(dfbracket[1, "title"], '\\[(\\d)\\]')
install.packages("stringr")
library(stringr)
str_match_all(dfbracket[1, "title"], '\\[(\\d)\\]')
?str_match_all
str_match(dfbracket[1, "title"], '\\[(\\d)\\]')
str_match_all(dfbracket[1, "title"], '\\[\\d\\]')
output <- str_match(dfbracket[1, "title"], '\\[(\\d)\\]')
output
str_match_all(dfbracket$title, '\\[(\\d)\\]')
stringout <- str_match_all(dfbracket$title, '\\[(\\d)\\]')
str_match_all(dfbracket$title, '\\[(\\d)\\]')[,2]
stringout[,2]
view(dfbracket)
View(dfbracket)
dfbracket$number <- str_match_all(dfbracket$title, '\\[(\\d)\\]')
dfbracket$number <- unlist(str_match_all(dfbracket$title, '\\[(\\d)\\]'), ncol=2)
?unlist
?rapply
stringout2 <- lapply(stringout, '[[2')
stringout2 <- lapply(stringout, '[2')
stringout2 <- lapply(stringout, '[[', 2)
stringout2 <- lapply(stringout, '[[', 1)
stringout
stringout2 <- lapply(stringout, '[[', 1)
head(stringout2)
head(stringout)
rapply(stringout, function(x), head(x, 1))
rapply(stringout, function(x), head(x, 1)))
rapply(stringout, function(x), head(x, 1))
rapply(stringout, function(x) head(x, 1))
?head
rapply(stringout, function(x) head(x, 2))
lapply(stringout, function(x) head(x, 2))
lapply(stringout, function(x) head(x, 1))
lapply(stringout, function(x) head(x, 2))
stringout
rapply(stringout, function(x) str(x))
rapply(stringout, function(x) x[1]
rapply(stringout, function(x) x[1])
rapply(stringout, function(x) str(x[1])
rapply(stringout, function(x) str(x[1]))
rapply(stringout, function(x) str(x[1]))
rapply(stringout, function(x) str(x[2]))
rapply(stringout, function(x) str(x[3]))
rapply(stringout, function(x) str(x[2]))
rapply(stringout, function(x) head(x[2]))
dfbracket$number <- rapply(stringout, function(x) head(x[2]))
View(dfbracket)
dfbracket$number2 <- regmatches(dfbracket[1, "title"],regexpr('\\d', dfbracket[1, "title"]))
View(dfbracket)
dfbracket$number2 <- regmatches(dfbracket$title,regexpr('\\d', dfbracket[1, "title"]))
dfbracket$number2 <- regmatches(dfbracket$title ,regexpr('\\d', dfbracket[1, "title"]))
dfbracket$number2 <- regmatches(dfbracket$title ,regexpr('\\d', dfbracket$title))
View(dfbracket)
View(dfbracket)
str(stringout)
regmatches(dfbracket[1, "title"], regexec('\\[(\\d)\\]', dfbracket[1, "title"]))
str_match_all(dfbracket[1, "title"], '\\[(\\d)\\]') #this works?!!
dfbracket$number <- rapply(stringout, function(x) head(x[2]))
?rapply
stringout
head(stringout)
head(stringout[,80])
head(stringout[80,])
stringout
string[1:1]
string[1,]
stringout[1:1]
stringout[1:2]
stringout[1:1]
stringout[1:1][1:1]
stringout[[1:1]]
head(stringout)
head(stringout[[80]])
View(dfbracket)
head(stringout[[80]])
head(stringout[[[80]]])
head(stringout[80])
head(stringout[80][1])
head(stringout[[80][1]])
head(stringout[[80]][[1]])
head(stringout[[80]][[1:2]])
head(stringout[[80]][[1:1]])
head(stringout[[80]][[2]])
head(stringout[[80]][[1]])
head(stringout[[80,]][[1]])
head(stringout[[80,]])
head(stringout[[80,1:2]])
head(stringout[80,1:2])
head(stringout[80])
head(stringout[80][1,2])
head(stringout[[80]][[1,2]])
head(stringout[[80]][[0,2]])
head(stringout[[80]][[1,]])
head(stringout[[80]][[1:2]])
head(stringout[[80]][[1,2]])
head(stringout[[80]][[1,3]])
head(stringout[[80]][[0,2]])
head(stringout[[80]][[1,]])
head(stringout[[80]][[,1]])
head(stringout[[80]][[1,2]])
head(stringout[[80]][1,2])
head(stringout[80][1,2])
head(stringout[[80]])
head(stringout[80])
[1]
head(stringout[80])
[[1]]
[1]
head(stringout[80])[1]
head(stringout[80])[[1]]
head(stringout[80])[[1]][1,]
head(stringout[80])[[1, 1:2]])
head(stringout[80])[[1, 1:2]])
head(stringout[80])[[1]][1,]
rapply(stringout, function(x) str(x))
str(stringout)
str(stringout)
str(stringout[1])
str(stringout[1][1,])
str(stringout[1][1])
dfbracket$number3 <- rapply(stringout, function(x) head(x[2])[[1]][1,])
head(stringout[80])[[1]][1,]
dfbracket$number3 <- rapply(stringout, function(x) head(x[2])[[1]])
View(dfbracket)
dfbracket$number3 <- rapply(stringout, function(x) head(x[2])[1,])
head(stringout[79])[[1]][1,]
head(stringout[80])[[1]][1,]
head(stringout[80])[[1]][1,][1]
head(stringout[80])[[1]][1,][2]
dfbracket$number3 <- rapply(stringout, function(x) head(x)[[1]][1,][2])
dfbracket$number3 <- rapply(stringout, function(x) head(x[1,][2]))
dfbracket$number3 <- rapply(stringout, function(x) head(x[1,][1]))
dfbracket$number3 <- rapply(stringout, function(x) head(x[[1]][1]))
dfbracket$number3 <- rapply(stringout, function(x) head(x))
dfbracket$number3 <- rapply(stringout, function(x) head(x,2))
dfbracket$number3 <- rapply(stringout, function(x) x[[1]][1,][2])
dfbracket$number3 <- rapply(stringout, function(x) x[1,][2])
dfbracket$number3 <- rapply(stringout, function(x) x[1,])
dfbracket$number3 <- rapply(stringout, function(x) x[1])
View(dfbracket)
dfbracket$number3 <- rapply(stringout, function(x) x[2])
View(dfbracket)
dfbracket$number <- rapply(stringout, function(x) head(x[3]))
View(dfbracket)
dfbracket$number3 <- rapply(stringout, function(x) x[3])
View(dfbracket)
dfbracket$number <- rapply(stringout, function(x) head(x[2])
head(stringout[80])[[1]][1,]
#head(stringout[[80]][[1,2]])
dfbracket$number3 <- rapply(stringout, function(x) x[3])
#add something about if length is 2 use second if length > 2 then select
#http://www.r-tutor.com/r-introduction/list
dfbracket$index <- as.numeric(gsub("\\D", "", dfbracket$title)) #gets rid of char but not in brackets
dfbracket$hscore <- grep(".*", dfbracket[1]$title)
str(dfbracket[1]$title)
#dfbracket$var <- as.numeric(strsplit(dfbracket$title, split="("))
dfbracket$title2 <- sub("\\[", "(", dfbracket$title)
dfbracket$title3 <- sub("\\]", ")", dfbracket$title2)
#dfbracket$var4 <- as.numeric(gsub("[[:alpha:]]", "", dfbracket$title))
dfbracket$var4 <- extract_numeric(dfbracket$title) #getting close?
#dfbracket$var <- as.numeric(grep("\\(", dfbracket$title3))
#dfbracket$index <- as.numeric(gsub("\\D", "[0-10]", dfbracket$title)) #gets rid of char but not in brackets
hscore <- as.numeric(unlist(regmatches(dfbracket$title3, regexpr("[[:digit:]]+", dfbracket$title3))))
#can't match back to dfbracket
dfbracket2 <- subset(dfbracket, index < 11) #need to refine, 364 to 327
summary(dfbracket2$index)
hist(dfbracket2$index, 10)
dfbracket2$date <- as.Date(dfbracket2$date_submission, format='%m/%d/%Y')
plot(dfbracket2$date, dfbracket2$index)
abline(lm(dfbracket2$index~dfbracket2$date))
mean(dfbracket2$index) #mean = 6.3
dfdab <- read.csv("trees__dab_date_title_bracket.csv")
dfdab$index <- as.numeric(gsub("\\D", "", dfdab$title)) #gets rid of char but not in brackets
dfdab2 <- subset(dfdab, index < 11) #need to refine, 488 to 407
summary(dfdab2$index) #mean = 7.5
dfshatter <- read.csv("trees_shatter__date_title_bracket.csv")
dfshatter$index <- as.numeric(gsub("\\D", "", dfshatter$title)) #gets rid of char but not in brackets
dfshatter2 <- subset(dfshatter, index < 11) #need to refine, 36 to 29, bong shatter false pos?
summary(dfshatter2$index) #mean = 7.7
dfvape <- read.csv("trees_vape_date_title_bracket.csv")
dfvape$index <- as.numeric(gsub("\\D", "", dfvape$title)) #gets rid of char but not in brackets
dfvape2 <- subset(dfvape, index < 11) #need to refine, 566 to 502
summary(dfvape2$index) #mean = 6.4
dfsmoke <- read.csv("trees_smoke_date_title_bracket.csv")
dfsmoke$index <- as.numeric(gsub("\\D", "", dfsmoke$title)) #gets rid of char but not in brackets
dfsmoke2 <- subset(dfsmoke, index < 11) #need to refine, 7051 to 6297
summary(dfsmoke2$index) #mean = 6.2, sd = 2.1
boxplot(dfbracket2$index, dfdab2$index, ylim = c(0,10), names = c("edible (N=327)", "dab (N=407)"), col = c("blue", "red"),
ylab = "subjective highness", xlab = "route of use")
title("Subjective Highness by Route of Use on r/trees")
boxplot(dfbracket2$index, ylim = c(0,10), names = c("edible (N=327)"), col = c("blue"),
ylab = "subjective highness")
title("Subjective Highness of edible use on r/trees")
boxplot(dfbracket2$index, dfdab2$index, dfshatter2$index, dfvape2$index, ylim = c(0,10),
names = c("edible", "dab", "shatter", "vape"),
col = c("blue", "red", "purple", "green"),
ylab = "subjective highness", xlab = "route of use")
boxplot(dfbracket2$index, dfdab2$index, dfvape2$index, ylim = c(0,10),
names = c("edible", "dab", "vape"),
col = c("blue", "red", "green"),
ylab = "subjective highness", xlab = "route of use")
boxplot(dfbracket2$index, dfdab2$index, dfsmoke2$index, dfvape2$index, ylim = c(0,10),
names = c("edible", "dab", "smoke", "vape"),
col = c("blue", "red", "purple", "green"),
ylab = "subjective highness", xlab = "route of use")
dftrees0116 <- read.csv("trees_2016-01_bracket.csv")
dftrees0116$index <- as.numeric(gsub("\\D", "", dftrees0116$title)) #gets rid of char but not in brackets
dftrees0116_2 <- subset(dftrees0116, index < 11) #need to refine, 1986 to 1819
summary(dftrees0116_2$index)
dfbracket$number <- rapply(stringout, function(x) head(x[2]))
dfbracket$number3 <- rapply(stringout, function(x) x[2])
dfbracket$length <- rapply(stringout, function(x) len(x))
dfbracket$length <- rapply(stringout, function(x) length(x))
View(dfbracket)
View(dfbracket)
dfbracket$number3 <- rapply(stringout, function(x) x[2])
View(dfbracket)
head(stringout[80])[[1]][1,]
getscore <- function(x){
if (length(x) = 2) return(x[2])
if (length(x) = 4) return(x[3])
}
getscore <- function(x){
if (length(x) == 2) return(x[2])
if (length(x) == 4) return(x[3])
}
dfbracket$score2 <- rapply(stringout, getscore)
getscore <- function(x){
if (length(x) == 0) return(NA)
if (length(x) == 2) return(x[2])
if (length(x) == 4) return(x[3])
if (length(x) == 8) return(x[7])
}
dfbracket$score2 <- rapply(stringout, getscore)
View(dfbracket)
View(dfbracket)
plot(dfbothv$month, dfbothv$prop, pch = 19, xlab = "Year", ylab = "Proportion",
ylim = c(0, .009))
library(stargazer)
install.packages("stargazer")
?stargazer
library(stargazer)
?stargazer
version()
